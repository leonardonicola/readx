generator client {
  provider      = "prisma-client-js"
  // Important to support Prisma Query engine in Alpine Linux
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                     @id
  email                    String                     @unique @db.VarChar(250)
  phoneNumber              String?                    @db.VarChar(20)
  firstName                String                     @db.VarChar(150)
  lastName                 String?                    @db.VarChar(150)
  created_at               DateTime                   @default(now())
  deleted_at               DateTime?
  updated_at               DateTime?
  bookshelves              Bookshelf[]
  ConversationParticipants ConversationParticipants[]
  Message                  Message[]

  @@map("user")
}

// Basically the relationship table between user and messages
model Conversation {
  id                       String                     @id @default(uuid())
  is_group                 Boolean                    @default(false)
  name                     String?
  created_at               DateTime                   @default(now())
  ConversationParticipants ConversationParticipants[]
  Message                  Message[]

  @@map("conversation")
}

model ConversationParticipants {
  id              String       @id @default(uuid())
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
  conversation_id String
  User            User         @relation(fields: [user_id], references: [id], onDelete: NoAction)
  user_id         String
  joined_at       DateTime     @default(now())

  @@map("conversation_participants")
}

model Message {
  id              String       @id @default(uuid())
  Conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  Sender          User         @relation(fields: [user_id], references: [id], onDelete: NoAction)
  content         String
  created_at      DateTime     @default(now())
  deleted_at      DateTime?
  conversation_id String
  user_id         String

  @@map("message")
}

model Bookshelf {
  id      String @id @default(uuid())
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  book    Book   @relation(fields: [book_id], references: [id], onDelete: Cascade)
  book_id String

  @@map("bookshelf")
}

model Book {
  id           String      @id @default(uuid())
  title        String      @db.VarChar(255)
  release_date DateTime
  author       String      @db.VarChar(150)
  genre        Genre       @relation(fields: [genre_id], references: [id], onDelete: NoAction)
  genre_id     Int
  bookshelves  Bookshelf[]

  @@map("book")
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)
  Book Book[]

  @@map("genre")
}
